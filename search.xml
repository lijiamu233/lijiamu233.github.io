<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MIT 6.s081 Lab8 Locks</title>
      <link href="/mit-6-s081-lab8-locks/"/>
      <url>/mit-6-s081-lab8-locks/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab7 Multithreading</title>
      <link href="/mit-6-s081-lab7-multithreading/"/>
      <url>/mit-6-s081-lab7-multithreading/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab6 Copy-on-Write Fork for xv6</title>
      <link href="/mit-6-s081-lab6-copy-on-write-fork-for-xv6/"/>
      <url>/mit-6-s081-lab6-copy-on-write-fork-for-xv6/</url>
      
        <content type="html"><![CDATA[<p>Lab6和Lab5比较相似，都是利用页错误的一些实现，这个Lab是要我们实现写时复制(Copy on Write)。</p><p>在 shell 中执行指令时，首先会 fork 一个子进程，然后在子进程中使用 exec 执行 shell 中的指令。在这个过程中，fork 需要完整的拷贝所有父进程的地址空间，但在 exec 执行时，又会完全丢弃这个地址空间，创建一个新的，因此会造成很大的浪费。</p>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab5 xv6 lazy page allocation</title>
      <link href="/mit-6-s081-lab5-xv6-lazy-page-allocation/"/>
      <url>/mit-6-s081-lab5-xv6-lazy-page-allocation/</url>
      
        <content type="html"><![CDATA[<p>疯狂补票博客ing</p><p>Lab5涉及到了页错误机制的一个应用——懒分配，通俗的讲就是程序申请内存的时候，操作系统并不直接分配内存，而是只增大进程的内存空间字段值，当真正需要用到申请的内存时，因为这部分内存没有分配，所以会引发页错误中断从而陷入内核，这时候再实际分配内存并重新执行指令。这样做的原因是为进程在申请内存时，很难精确地知道所需要的内存多大，因此，<strong>进程倾向于申请多于所需要的内存</strong>。这样会导致一个问题：<strong>有些内存可能一直不会使用，申请了很多内存但是使用的很少</strong>，从而造成浪费。</p><p>xv6的进程的地址空间是从0～MAXVA连续的，其分布如下：</p><p><img src="1.jpg"></p><p>进程创建时，首先为可执行程序分配代码段（text）和数据段（data），然后分配一个无效的页 guard page 用于防止栈溢出。接下来分配进程用户空间栈，xv6 栈的大小是4096，刚好对应一页内存。值得注意的是，栈的生长方向是向下的，sp 是栈指针，初始时指向栈底，即大的地址位置。在栈生长时，栈指针（sp）减小。栈的上面是堆（heap），堆的大小是动态分配的，进程初始化时，堆大小为 0，p-&gt;sz 指针指向栈底位置。</p><p>本实验的前置知识是<a href="https://pdos.csail.mit.edu/6.828/2020/xv6/book-riscv-rev1.pdf">xv6 book</a>的第 4 章（特别是 4.6），以及阅读相关的源码，比如<code>kernel/trap.c</code>，<code>kernel\vm.c</code>，<code>kernel/sysproc.c</code>。</p><h2 id="Eliminate-allocation-from-sbrk"><a href="#Eliminate-allocation-from-sbrk" class="headerlink" title="Eliminate allocation from sbrk()"></a>Eliminate allocation from sbrk()</h2><p>这部分任务的主要工作就是取消<code>sys_sbrk()</code>中对<code>growproc()</code>的调用，改成只增加sz字段。</p><p>注意，有一些特殊情况需要处理：</p><ul><li>如果参数n是小于0的，那么需要将对应的内存释放，可以仿照growproc的方法来写。</li><li>如果堆空间大小超过了MAXVA或者需要释放小于0的地址，那么就直接返回，不进行操作。</li></ul><p>代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/sysproc.c</span>uint64<span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> addr<span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  addr <span class="token operator">=</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> n <span class="token operator">&gt;=</span> MAXVA <span class="token operator">||</span> addr <span class="token operator">+</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> addr<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>sz <span class="token operator">=</span> addr <span class="token operator">+</span> n<span class="token punctuation">;</span>  <span class="token comment">// if(growproc(n) &lt; 0)</span>  <span class="token comment">//   return -1;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">uvmdealloc</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> addr <span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lazy-allocation"><a href="#Lazy-allocation" class="headerlink" title="Lazy allocation"></a>Lazy allocation</h2><p>首先根据上一个实验的经验和任务提示，我们需要去<code>usertrap()</code>中添加一些处理的函数，而且页错误的错误码是13或15，可以通过<code>r_scause()</code>来查看错误码，<code>r_stval()</code>来获取导致页错误的虚拟地址，再直接仿照<code>uvmalloc()</code>的写法申请内存，需要注意的是，如果内存申请成功之后发现虚拟地址不合法，需要把申请的内存释放掉，比如<code>va &gt;= p-sz</code>，虚拟地址超过了堆实际分配的大小，或者是没有成功映射到物理地址等等，一旦出现这些情况需要把进程kill掉。此外，我们还需要判断栈溢出，<code>p-&gt;trapframe-&gt;sp</code> 是指栈指针的位置，所以 <code>PGROUNDDOWN(p-&gt;trapframe-&gt;sp)</code> 是指栈顶最大值，是 guard 页的最大地址，一旦va比栈顶最大值小说明溢出，也同上处理。代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// in kernel/trap.c usertrap()</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span> <span class="token operator">||</span> <span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    uint64 va <span class="token operator">=</span> <span class="token function">r_stval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64 pa <span class="token operator">=</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span><span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> p<span class="token operator">-&gt;</span>sz <span class="token operator">||</span> va <span class="token operator">&lt;=</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      va <span class="token operator">=</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> PTE_W <span class="token operator">|</span> PTE_U <span class="token operator">|</span> PTE_R<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务提示告诉我们<code>uvmunmap()</code>会panic，所以我们还需要进去把它改成continue。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/vm.c</span><span class="token keyword">void</span><span class="token function">uvmunmap</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span> uint64 va<span class="token punctuation">,</span> uint64 npages<span class="token punctuation">,</span> <span class="token keyword">int</span> do_free<span class="token punctuation">)</span><span class="token punctuation">{</span>  uint64 a<span class="token punctuation">;</span>  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>va <span class="token operator">%</span> PGSIZE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"uvmunmap: not aligned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>a <span class="token operator">=</span> va<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> va <span class="token operator">+</span> npages<span class="token operator">*</span>PGSIZE<span class="token punctuation">;</span> a <span class="token operator">+=</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment">//panic("uvmunmap: walk");</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">//panic("uvmunmap: not mapped");</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">PTE_FLAGS</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token operator">==</span> PTE_V<span class="token punctuation">)</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"uvmunmap: not a leaf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>do_free<span class="token punctuation">)</span><span class="token punctuation">{</span>      uint64 pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样任务二就完成了，执行echo hi不会报错。</p><h2 id="Lazytests-and-Usertests"><a href="#Lazytests-and-Usertests" class="headerlink" title="Lazytests and Usertests"></a>Lazytests and Usertests</h2><p>最后是要通过整个的测试，其实就是需要处理两个函数因为缺页导致的panic，<code>uvmcopy()</code>和<code>walkaddr()</code></p><p>fork 函数在创建进程时会调用 <code>uvmcopy</code> 函数。由于没有实际分配内存而引起panic，所以直接忽略 pte 无效，继续执行代码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/vm.c</span><span class="token keyword">int</span><span class="token function">uvmcopy</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> old<span class="token punctuation">,</span> <span class="token class-name">pagetable_t</span> new<span class="token punctuation">,</span> uint64 sz<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>  uint64 pa<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  uint flags<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>mem<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i <span class="token operator">+=</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">//panic("uvmcopy: pte should exist");</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">//panic("uvmcopy: page not present");</span>    pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>    flags <span class="token operator">=</span> <span class="token function">PTE_FLAGS</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mem <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    <span class="token function">memmove</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> i<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>mem<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">kfree</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> err<span class="token operator">:</span>  <span class="token function">uvmunmap</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">/</span> PGSIZE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行read/write 等系统调用时，由于进程已经陷入内核，页表会切换为内核页表，无法直接访问虚拟地址。<code>walkaddr()</code>的作用就是将虚拟地址翻译为物理地址。这里如果没找到对应的物理地址，就分配一个，注意判断地址无效，和任务二中基本等同。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/vm.c</span>uint64<span class="token function">walkaddr</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span> uint64 va<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>  uint64 pa<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> MAXVA<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//if(pte == 0)</span>  <span class="token comment">//  return 0;</span>  <span class="token comment">//if((*pte &amp; PTE_V) == 0)</span>  <span class="token comment">//  return 0;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pte <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//pa = lazyalloc(va);</span>    <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> p<span class="token operator">-&gt;</span>sz <span class="token operator">||</span> va <span class="token operator">&lt;</span> <span class="token function">PGROUNDUP</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    pa <span class="token operator">=</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span><span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> PTE_W<span class="token operator">|</span>PTE_R<span class="token operator">|</span>PTE_U<span class="token operator">|</span>PTE_X<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pa<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_U<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pa<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此就完成了整个Lab。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个实验不算太难，但是小细节，比如判断虚拟地址无效的地方比较多。通过这个实验也能深入了解一下懒分配的机制。</p>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab4 traps</title>
      <link href="/mit-6-s081-lab4-traps/"/>
      <url>/mit-6-s081-lab4-traps/</url>
      
        <content type="html"><![CDATA[<p>Lab4考察的主要内容是陷阱有关的内容，前置知识是xv6book的第四章和<code>kernel/trap.c</code>，<code>kernel/trampoline.S</code>两个源码文件，顺便还需要复习一下Lab2的一些知识。</p><h3 id="RISC-V-assembly"><a href="#RISC-V-assembly" class="headerlink" title="RISC-V assembly"></a>RISC-V assembly</h3><p>这个任务是让你简单了解一下RISC-V的汇编指令，然后回答几个问题。</p><p>首先<code>make fs.img</code>进行编译，查看得到的<code>user/call.asm</code>文件。</p><p>其中main函数部分如下：</p><p><img src="asm.png" alt="asm"></p><p>问题如下：</p><ul><li><p>问题一：哪些寄存器存储了函数调用的参数？举个例子，main 调用 printf 的时候，13 被存在了哪个寄存器中？</p></li><li><p>问题二：main 中调用函数 f 对应的汇编代码在哪？对 g 的调用呢？ (提示：编译器有可能会内联(inline)一些函数) </p></li><li><p>问题三：printf 函数所在的地址是？</p></li><li><p>问题四：在 main 中 jalr 跳转到 printf 之后，ra 的值是什么？</p></li><li><p>问题五：运行下面的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0x00646c72</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"H%x Wo%s"</span><span class="token punctuation">,</span> <span class="token number">57616</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出是什么？ 如果 RISC-V 是大端序的，要实现同样的效果，需要将 i 设置为什么？需要将 57616 修改为别的值吗？</p></li><li><p>问题六：在下面的代码中，’y=’ 之后会打印什么？ (note: 答案不是一个具体的值) 为什么?</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x=%d y=%d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>回答如下：</p><ul><li>回答一：根据第45行代码，我们可以直到printf所调用的两个参数12(其实就是f(8)+1)和13分别被存放到了寄存器a1和a2中，又由之前的知识可以知道xv6中是用a0<del>a7存放函数的参数的，所以答案是 a0</del>a7，a2。</li><li>回答二：其实根据42行直接把12存放到了a1中，去看f和g的代码，就可以知道是编译器自动把g内联到了f中，f又自动内联到了main中，自然就没有调用对应的汇编代码。</li><li>回答三：两种方法可以得到，一种是直接在整个asm文件中搜索printf，可以找到其地址是0x0000000000000630。或者通过计算得到：首先将当前程序计数器的值赋给 ra 寄存器。<code>auipc ra, 0x0</code>，是指将当前立即数向右移动12位，然后加上 pc 寄存器的值，赋给 ra 寄存器，由于立即数为 0，因此 ra 的值即为 pc 的值。当前指令在0x30处，因此 pc = 0x30。1536(ra) 是指 1536 加上 ra 寄存器的值，1536 转为16进制再加上0x30 即为 0x0000000000000630。刚好是 printf 的地址。</li><li>回答四：jalr 指令会将 pc + 4 赋给当前寄存器，刚好是其下一条指令的地址。</li><li>回答五：%x是用十六进制输出，所以前一段输出会是He110，而%s是输出字符串，因为RISC-V是小端序，所以内存中存放的是72 6c 64 00，是ascii码，所以输出是World，采用大端序的话改成0x726c6400就好了。所以答案是He110 World。</li><li>回答六：printf 接收到了两个参数，但实际需要三个参数，最后一个参数是放在 a2 寄存器中，由于没有输入第三个参数，所以会输出a2当前的值，所以不固定。</li></ul><h3 id="Backtrace"><a href="#Backtrace" class="headerlink" title="Backtrace"></a>Backtrace</h3><p>本任务要求实现一个backtrace函数，对调用的函数栈进行回溯。</p><p>在操作系统(Xv6)中，内核为每个进程都分配了一段栈帧内存页，用于存放栈，函数调用就是在该处进行的，其中fp为当前函数的栈顶指针，fp-8存放的是返回地址，fp-16存放原栈帧，也就是调用函数的fp，因此我们可以从当前函数的fp出发，每次向fp-16回溯直到当前页的开始地址就可以找到调用链。</p><p>根据实验提示，我们首先将<code>backtrace()</code>的声明添加到<code>kernel/defs.h</code>：<code>void backtrace(void);</code></p><p>然后使用提示给出的读取fp的函数，其实就是获取s0的值，将这个函数添加到<code>kernel\riscv.h</code>中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64<span class="token function">r_fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  uint64 x<span class="token punctuation">;</span>  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mv %0, s0"</span> <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着就可以实现backtrace了，根据提示和上面提到的方法，并不困难。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint64 fp <span class="token operator">=</span> <span class="token function">r_fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token function">PGROUNDUP</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"backtrace:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> fp <span class="token operator">&lt;</span> top<span class="token punctuation">;</span> fp <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint64<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fp<span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint64<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fp<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后根据任务要求，在 kernel/printf.c 文件中的 panic 函数里添加 backtrace 的函数调用；在 sys_sleep 代码中也添加同样的函数调用。</p><p>panic</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panicked <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// freeze uart output from other CPUs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sys_sleep</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样这个任务就完成了，可以用<code>bttest</code>命令来检查。</p><h3 id="Alarm"><a href="#Alarm" class="headerlink" title="Alarm"></a>Alarm</h3><p>这个任务是让添加一个新的系统调用<code>sigalarm</code>，如果应用程序调用<code>sigalarm(n, fn)</code> ，那么在程序消耗的 每 <code>n 个CPU 时间“tick”之后，内核应该调用函数fn</code>。当<code>fn</code>返回时，应用程序应该从中断的地方继续。这个任务有三个test，其中test0只需要进入内核并且至少执行一次就可以了，不需要正确返回</p><p>首先根据lab2的流程和任务提示添加系统调用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// user/user.h</span><span class="token keyword">int</span> <span class="token function">sigalarm</span><span class="token punctuation">(</span><span class="token keyword">int</span> ticks<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// user/usys.pl</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"sigalarm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"sigreturn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// kernel/syscall.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_sigalarm</span>  <span class="token expression"><span class="token number">22</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_sigreturn</span> <span class="token expression"><span class="token number">23</span></span></span><span class="token comment">// kernel/syscall.c</span><span class="token keyword">extern</span> uint64 <span class="token function">sys_sigalarm</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> uint64 <span class="token function">sys_sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>SYS_sigalarm<span class="token punctuation">]</span>  sys_sigalarm<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sigreturn<span class="token punctuation">]</span> sys_sigreturn<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后实现test0，先写一个<code>sys_sigreturn</code>，暂时只用返回0，后面test1/2再补充。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/sysproc.c</span>uint64 <span class="token function">sys_sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是<code>sys_sigalarm</code>, 作用是给proc结构体进行赋值，为了记录时间间隔，经过的时钟数和调用的函数信息，我们还需要在proc结构体中添加一些成员</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/proc.h</span><span class="token comment">// in struct proc</span>    <span class="token keyword">int</span> interval<span class="token punctuation">;</span>    uint64 handler<span class="token punctuation">;</span>    <span class="token keyword">int</span> ticks<span class="token punctuation">;</span><span class="token comment">// kernel/sysproc.c</span>uint64 <span class="token function">sys_sigalarm</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> interval<span class="token punctuation">;</span>  uint64 handler<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>interval<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">argaddr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handler<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> interval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>interval <span class="token operator">=</span> interval<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为proc中添加了新成员，所以在进程初始化的时候也要赋初值，进程结束的时候释放。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/proc.c</span><span class="token comment">// in allocproc()</span>  p<span class="token operator">-&gt;</span>interval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// in freeproc()</span>  p<span class="token operator">-&gt;</span>interval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，在时钟中断的时候进行处理，根据实验提示可以直到时钟中断部分是<code>if(which_dev == 2) </code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/trap.c</span><span class="token comment">// in usertrap()</span><span class="token keyword">if</span><span class="token punctuation">(</span>which_dev <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ticks <span class="token operator">==</span> p<span class="token operator">-&gt;</span>interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// will be removed</span>        p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>epc <span class="token operator">=</span> p<span class="token operator">-&gt;</span>handler<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      p<span class="token operator">-&gt;</span>ticks<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，test0 就可以顺利通过了。值得注意的是，现在还不能正确返回到调用前的状态，因此test1 和 test2 还不能正常通过。</p><p>这里为啥把要调用的函数直接赋给 epc 呢，原因是函数在返回时，调用 ret 指令，使用 trapframe 内事先保存的寄存器的值进行恢复。这里我们更改 epc 寄存器的值，在返回后，就直接调用的是 handler 处的指令，即执行 handler 函数。</p><p>handler 函数是用户态的代码，使用的是用户页表的虚拟地址，因此只是在内核态进行赋值，在返回到用户态后才进行执行，并没有在内核态执行handler代码。</p><p>最后来看test1/2，不能正常通过的原因是在执行好 handler 后，我们希望的是回到用户调用 handler 前的状态。但那时的状态已经被用来调用 handler 函数了，现在的 trapframe 中存放的是执行 sys_sigreturn 前的 trapframe，如果直接返回到用户态，就会找不到之前的状态。</p><p>一个比较简单的解决办法是再添加一个trapframe成员记录保存调用 handler 之前的 trapframe，这样只要执行了handler，我们就保存执行前的trapframe，然后在<code>sys_sigreturn()</code>的时候恢复回来。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/proc.h</span><span class="token comment">// in struct proc</span><span class="token keyword">struct</span> <span class="token class-name">trapframe</span> <span class="token operator">*</span>pretrapframe<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后同样在初始化和结束的时候赋初值和释放：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/proc.c</span><span class="token comment">// in allocproc()</span>  p<span class="token operator">-&gt;</span>interval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pretrapframe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trapframe</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">// in freeproc()</span>  p<span class="token operator">-&gt;</span>interval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pretrapframe<span class="token punctuation">)</span>    <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token operator">-&gt;</span>pretrapframe<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用handler时保存trapframe：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/trap.c</span><span class="token comment">// in usertrap()</span><span class="token keyword">if</span><span class="token punctuation">(</span>which_dev <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ticks <span class="token operator">==</span> p<span class="token operator">-&gt;</span>interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//p-&gt;ticks = 0;</span>        <span class="token operator">*</span>p<span class="token operator">-&gt;</span>pretrapframe <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>epc <span class="token operator">=</span> p<span class="token operator">-&gt;</span>handler<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      p<span class="token operator">-&gt;</span>ticks<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，实现 sys_sigreturn 恢复执行 handler 之前的状态：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint64 <span class="token function">sys_sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>p<span class="token operator">-&gt;</span>trapframe <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">-&gt;</span>pretrapframe<span class="token punctuation">;</span>  p<span class="token operator">-&gt;</span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要把ticks置0从usertrap中挪到sys_sigreturn中呢，因为我们要保证如果有一个handler函数正在执行，就不能让第二个handler函数继续执行。为此，可以再添加一个成员，用于标记是否有 handler 在执行。如果选择不添加新成员，那么就可以采用这种方法，因为第一个 handler 还没执行完时， ticks会 一直递增，因为ticks不是0，所以第二个 handler 始终无法执行。只有当 sigreturn 执行完成后，ticks 才置为 0，这样就可以等待下一个 handler 执行了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个实验虽然写的代码没有上一个实验多，但想要完全理解trap的机制还是有一定难度的，做完这个实验确实收获许多。</p>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab3 pagetabel</title>
      <link href="/mit-6-s081-lab3-pagetabel/"/>
      <url>/mit-6-s081-lab3-pagetabel/</url>
      
        <content type="html"><![CDATA[<p>过年耽误了不少时间，再加上看OSTEP，Lab3就一直拖到了现在。</p><p>注意：ArchLinux下按照官网的Guide安装的环境里qemu的版本是更新过的，2020版本的实验执行qemu后会导致挂起，前两个实验因为用的2021的环境所以没发现这个问题，但是Lab3的内容不一样导致我修了半天环境才继续做。</p><p>Lab3的主要内容是页表，难度相对前两个Lab难了不是一点，理解起来也比较抽象，涉及到内核态页表，用户态页表，还有多级页表的寻址，虚拟地址与物理地址的映射，页表条目之间的转换以及申请新的页表时，栈空间，进程空间还有符号位的各种标记，需要精读xv6这一块的代码才能比较好的理解。</p><p>具体的笔记等以后有空再补吧，先把实验细节补充上。</p><p>本次实验的前置知识：xv6 Book的Chapter 3，阅读代码<code>kernel/vm.c</code>，<code>kernel/kalloc.c</code>，<code>kernel/memlayout.h</code>。</p><p>其实还应该看一下<code>kernel/proc.c</code>，<code>kernel/exec</code>，<code>kernel/sysproc.c</code>，理解页表的创建和调用过程。</p><h3 id="Print-a-page-table"><a href="#Print-a-page-table" class="headerlink" title="Print a page table"></a>Print a page table</h3><p>第一个任务是打印页表，要求打印页表的pte和pa，同时对多级页表进行分层的显示，具体格式见实验网页。</p><p>这是本次实验最简单的任务，同时也能作为后续任务的调试工具。</p><p>根据任务提示，<code>freewalk()</code>会是我们的突破口，仿照该函数我们可以写出递归打印页表的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vmprinter</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">pte_t</span> pte <span class="token operator">=</span> pagetable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>      uint64 pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: pte %p pa %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> pte<span class="token punctuation">,</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> <span class="token punctuation">(</span>PTE_R <span class="token operator">|</span> PTE_W <span class="token operator">|</span> PTE_X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">vmprinter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span>pa<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么判断是否到达多级页表树的叶节点？看代码可以知道叶节点的页表的RWX位一定不是全为0的，用这个可以判断，<code>freewalk()</code>也写的很清楚。</p><p>然后打印页表即可，并且将函数定义添加到<code>kernel/defs.h</code>中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">vmprint</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"page table %p\n"</span><span class="token punctuation">,</span> pagetable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vmprinter</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了能在一开始就打印页表，我们还需要在<code>exec.c</code>中<code>exec()</code>的<code>return argc;</code>前添加<code>if (p-&gt;pid == 1) { vmprint(p-&gt;pagetable); }</code></p><p>这样任务一就算完成了。</p><h3 id="A-kernel-page-table-per-process"><a href="#A-kernel-page-table-per-process" class="headerlink" title="A kernel page table per process"></a>A kernel page table per process</h3><p>任务二比较抽象，也是本次实验综合难度最高的一个任务。</p><p>首先要理解内核态页表是什么：xv6维护一个公用的内核态页表，进程在切换到内核态时，页表也会切换成公用的内核态页表，而内核态页表和用户态页表最大的不同就是除了栈和蹦床帧等几个地方外，其余的都是采用直接映射的方式来转换地址，因此进程在用户态的页表中引用的虚拟地址需要在用户态再经过一次转换才能被内核态页表转换，例如，传递给write() 的缓冲区指针。任务二和任务三的目标是在内核态直接翻译进程的虚拟地址。</p><p>回到任务二，这个任务的要求是为每个进程增加一个内核态页表，这样进程切换到内核态时就可以直接用该进程对应的内核态页表，而不是公用的，这样就免去了多一次转换的功夫。看完代码后就可以开始添加了，按照任务提示一步步完成。</p><h4 id="第一步：添加kernel-pagetable"><a href="#第一步：添加kernel-pagetable" class="headerlink" title="第一步：添加kernel pagetable"></a>第一步：添加kernel pagetable</h4><p>在 <code>kernel/proc.h</code> 中的 <code>proc</code> 结构体中添加一个字段 <code>pagetable_t kpagetable;</code>，表示内核态页表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Per-process state</span><span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">spinlock</span> lock<span class="token punctuation">;</span>  <span class="token comment">// p-&gt;lock must be held when using these:</span>  <span class="token keyword">enum</span> <span class="token class-name">procstate</span> state<span class="token punctuation">;</span>        <span class="token comment">// Process state</span>  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>         <span class="token comment">// Parent process</span>  <span class="token keyword">void</span> <span class="token operator">*</span>chan<span class="token punctuation">;</span>                  <span class="token comment">// If non-zero, sleeping on chan</span>  <span class="token keyword">int</span> killed<span class="token punctuation">;</span>                  <span class="token comment">// If non-zero, have been killed</span>  <span class="token keyword">int</span> xstate<span class="token punctuation">;</span>                  <span class="token comment">// Exit status to be returned to parent's wait</span>  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>                     <span class="token comment">// Process ID</span>  <span class="token comment">// these are private to the process, so p-&gt;lock need not be held.</span>  uint64 kstack<span class="token punctuation">;</span>               <span class="token comment">// Virtual address of kernel stack</span>  uint64 sz<span class="token punctuation">;</span>                   <span class="token comment">// Size of process memory (bytes)</span>  <span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">;</span>       <span class="token comment">// User page table</span>  <span class="token class-name">pagetable_t</span> kpagetable<span class="token punctuation">;</span>      <span class="token comment">// 在这里添加</span>  <span class="token keyword">struct</span> <span class="token class-name">trapframe</span> <span class="token operator">*</span>trapframe<span class="token punctuation">;</span> <span class="token comment">// data page for trampoline.S</span>  <span class="token keyword">struct</span> <span class="token class-name">context</span> context<span class="token punctuation">;</span>      <span class="token comment">// swtch() here to run process</span>  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>ofile<span class="token punctuation">[</span>NOFILE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Open files</span>  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>cwd<span class="token punctuation">;</span>           <span class="token comment">// Current directory</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// Process name (debugging)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二步：初始化内核态页表"><a href="#第二步：初始化内核态页表" class="headerlink" title="第二步：初始化内核态页表"></a>第二步：初始化内核态页表</h4><p><code>kernel/vm.c</code>里面提供了<code>kvminit()</code>来初始化原本的公用页表，仿照其写一个初始化函数即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pagetable_t</span> <span class="token function">ukvminit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">pagetable_t</span> kpagetable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// uart registers</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> UART0<span class="token punctuation">,</span> UART0<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// virtio mmio disk interface</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> VIRTIO0<span class="token punctuation">,</span> VIRTIO0<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// CLINT</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> CLINT<span class="token punctuation">,</span> CLINT<span class="token punctuation">,</span> <span class="token number">0x10000</span><span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// PLIC</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> PLIC<span class="token punctuation">,</span> PLIC<span class="token punctuation">,</span> <span class="token number">0x400000</span><span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// map kernel text executable and read-only.</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> KERNBASE<span class="token punctuation">,</span> KERNBASE<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>etext<span class="token operator">-</span>KERNBASE<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// map kernel data and the physical RAM we'll make use of.</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>etext<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>etext<span class="token punctuation">,</span> PHYSTOP<span class="token operator">-</span><span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>etext<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// map the trampoline for trap entry/exit to</span>  <span class="token comment">// the highest virtual address in the kernel.</span>  <span class="token function">ukvmmap</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> TRAMPOLINE<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>trampoline<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_X<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> kpagetable<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：原本的kvmmap是直接为公用页表添加映射的，所以我们还要小改一下这个函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ukvmmap</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> kpagetable<span class="token punctuation">,</span>uint64 va<span class="token punctuation">,</span> uint64 pa<span class="token punctuation">,</span> uint64 sz<span class="token punctuation">,</span> <span class="token keyword">int</span> perm<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> perm<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"ukvmmap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在原本调用<code>kvminit()</code>的地方增加对<code>ukvminit()</code>的调用，根据提示可知是在在 <code>kernel/proc.c</code> 中的 <code>allocproc</code> 函数里：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// An empty user page table.</span>  p<span class="token operator">-&gt;</span>pagetable <span class="token operator">=</span> <span class="token function">proc_pagetable</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freeproc</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 在下面添加</span>  <span class="token comment">// An empty user kernel page table.</span>  p<span class="token operator">-&gt;</span>kpagetable <span class="token operator">=</span> <span class="token function">ukvminit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freeproc</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步完成，注意把<code>ukvminit()</code>添加到<code>defs.h</code></p><h4 id="第三步：初始化内核栈"><a href="#第三步：初始化内核栈" class="headerlink" title="第三步：初始化内核栈"></a>第三步：初始化内核栈</h4><p>根据任务提示，要求我们把原来是在 <code>kernel/proc.c</code> 中的 <code>procinit</code> 函数内的相关代码移到<code>allocproc()</code>中，因此在第二步添加的地方下面把<code>procinit</code>内的代码<strong>直接移入</strong> <code>allocproc</code>中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">// An empty user kernel page table.</span> p<span class="token operator">-&gt;</span>kpagetable <span class="token operator">=</span> <span class="token function">ukvminit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">freeproc</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 在下面添加</span> <span class="token keyword">char</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pa <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"kalloc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> uint64 va <span class="token operator">=</span> <span class="token function">KSTACK</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p <span class="token operator">-</span> proc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">ukvmmap</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>pa<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span>kstack <span class="token operator">=</span> va<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第四步：在进程调度时切换内核页"><a href="#第四步：在进程调度时切换内核页" class="headerlink" title="第四步：在进程调度时切换内核页"></a>第四步：在进程调度时切换内核页</h4><p>其实前三步就已经完成了每个进程独有的内核态页表的创建，第四步是在调度时的修改。</p><p>从xv6 Book中可以得知内核页的管理使用的是SATP寄存器，任务提示你要修改<code>schduler()</code>并且不要忘记在调用<code>w_satp()</code> 之后调用<code>sfence_vma()</code>，可以参考<code>kvminithart()</code>。注意要切换回来。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// change satp</span><span class="token function">w_satp</span><span class="token punctuation">(</span><span class="token function">MAKE_SATP</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sfence_vma</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// change process</span><span class="token function">swtch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-&gt;</span>context<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// change back</span><span class="token function">kvminithart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第五步：释放内核栈内存"><a href="#第五步：释放内核栈内存" class="headerlink" title="第五步：释放内核栈内存"></a>第五步：释放内核栈内存</h4><p>有始有终，既然添加了页表就要能够释放掉。</p><p>释放页表的函数位于<code>kernel/proc.c</code>的<code>freeproc()</code>中，我们需要对这个函数进行修改</p><p>释放页表的第一步是先释放页表内的内核栈，因为页表内存储的内核栈地址本身就是一个虚拟地址，需要先将这个地址指向的物理地址进行释放：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">)</span>  <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>trapframe <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//在这里添加</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kstack<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">pte_t</span><span class="token operator">*</span> pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>kstack<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pte <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"freeproc: walk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>p<span class="token operator">-&gt;</span>kstack <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意需要将 <code>walk</code> 函数的定义添加到 <code>kernel/defs.h</code> 中，该函数的作用是从制定页表中的虚拟地址找到对应条目，然后通过<code>PTE2PA</code>转换成物理地址释放掉。</p><h4 id="第六步：释放内核页表"><a href="#第六步：释放内核页表" class="headerlink" title="第六步：释放内核页表"></a>第六步：释放内核页表</h4><p>直接遍历所有的页表，释放所有有效的页表项即可。仿照 <code>freewalk</code> 函数。由于 <code>freewalk</code> 函数将对应的物理地址也直接释放了，我们这里释放的内核页表仅仅只是用户进程的一个备份，释放时仅释放页表的映射关系即可，不能将真实的物理地址也释放了。因此不能直接调用<code>freewalk</code> 函数，而是需要进行更改：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">proc_freewalk</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">pte_t</span> pte <span class="token operator">=</span> pagetable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>      pagetable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> <span class="token punctuation">(</span>PTE_R <span class="token operator">|</span> PTE_W <span class="token operator">|</span> PTE_X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        uint64 child <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">proc_freewalk</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pagetable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在 <code>freeproc</code> 中进行调用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// delete user pagetable</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">)</span>  <span class="token function">proc_freepagetable</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>pagetable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 在这里添加</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">proc_freewalk</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们对整个页表的创建，调度和释放的工作就做完了，只剩下修改原本进程切入内核态所使用的页表了。</p><h4 id="第七步：切换进程内核页表"><a href="#第七步：切换进程内核页表" class="headerlink" title="第七步：切换进程内核页表"></a>第七步：切换进程内核页表</h4><p>在<code>vm.c</code> 中添加头文件：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"spinlock.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"proc.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后更改 <code>kvmpa</code> 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Simplify-copyin-copyinstr"><a href="#Simplify-copyin-copyinstr" class="headerlink" title="Simplify copyin/copyinstr"></a>Simplify <code>copyin/copyinstr</code></h3><p>通过任务二，我们已经完成了对每个进程创建一个对应的内核态页表，但最关键的问题是：它是空的！</p><p>因此任务三的目标就是将用户进程页表的所有内容都复制到内核页表中，这样就可以完成内核态直接转换虚拟地址，同时该实验为我们提供了直接转换的简化版<code>copyin_new/copyinstr_new</code>函数，我们需要将原本的间接转换版本替换成新版。</p><h4 id="第一步：复制页表内容"><a href="#第一步：复制页表内容" class="headerlink" title="第一步：复制页表内容"></a>第一步：复制页表内容</h4><p>仿照<code>uvmcopy()</code>，我们可以照猫画虎一个<code>u2kvmcopy()</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">u2kvmcopy</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> upagetable<span class="token punctuation">,</span> <span class="token class-name">pagetable_t</span> kpagetable<span class="token punctuation">,</span> uint64 oldsz<span class="token punctuation">,</span> uint64 newsz<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte_u<span class="token punctuation">,</span> <span class="token operator">*</span>pte_k<span class="token punctuation">;</span>  uint64 pa<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  uint flags<span class="token punctuation">;</span>  oldsz <span class="token operator">=</span> <span class="token function">PGROUNDUP</span><span class="token punctuation">(</span>oldsz<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> oldsz<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newsz<span class="token punctuation">;</span> i <span class="token operator">+=</span> PGSIZE<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte_u <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>upagetable<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"u2kvmcopy: pte_u should exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte_k <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>kpagetable<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"u2kvmcopy: pte_k should exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte_u<span class="token punctuation">)</span><span class="token punctuation">;</span>    flags <span class="token operator">=</span> <span class="token function">PTE_FLAGS</span><span class="token punctuation">(</span><span class="token operator">*</span>pte_u<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>PTE_U<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pte_k <span class="token operator">=</span> <span class="token function">PA2PTE</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span> <span class="token operator">|</span> flags<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，因为xv6设定了内核态不能访问PTE_U位为1的页表，因此我们最后要把该位设为0。</p><h4 id="第二步：在对应位置调用页表复制"><a href="#第二步：在对应位置调用页表复制" class="headerlink" title="第二步：在对应位置调用页表复制"></a>第二步：在对应位置调用页表复制</h4><p>根据任务提示，我们需要修改的地方是三个函数：<code>fork()</code>，<code>sbrk()</code>，<code>exec()</code>。</p><ul><li><p><code>fork()</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">np<span class="token operator">-&gt;</span>cwd <span class="token operator">=</span> <span class="token function">idup</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加代码</span>  <span class="token function">u2kvmcopy</span><span class="token punctuation">(</span>np<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> np<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> np<span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">safestrcpy</span><span class="token punctuation">(</span>np<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sbrk()</code></p><p>sbrk() 需要到 <code>sysproc.c</code> 找，可以发现，调用的是 <code>growproc</code> 函数，在其中添加防止溢出的函数：</p><pre class="line-numbers language-none"><code class="language-none">if(PGROUNDUP(sz + n) &gt;= PLIC) return -1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>exec()</code></p><p>在执行新的程序前，初始化之后，进行页表拷贝：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">u2kvmcopy</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Push argument strings, prepare rest of stack in ustack.</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>argc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span><span class="token punctuation">;</span> argc<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>除了这三个函数外，任务提示我们不要忘记在<code>userinit</code>的内核页表中包含第一个进程的用户页表。（<code>userinit()</code>在<code>kernel/proc.c</code>中）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">uvminit</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> initcode<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>initcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>sz <span class="token operator">=</span> PGSIZE<span class="token punctuation">;</span><span class="token function">u2kvmcopy</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>kpagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步：将copyin-copyinstr-换成copyin-new-copyinstr-new"><a href="#第三步：将copyin-copyinstr-换成copyin-new-copyinstr-new" class="headerlink" title="第三步：将copyin/copyinstr 换成copyin_new/copyinstr_new"></a>第三步：将<code>copyin/copyinstr</code> 换成<code>copyin_new/copyinstr_new</code></h4><p>将copyin和copyinstr函数内部全部注释掉，改为调用copyin_new和copyinstr_new函数即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Lab3的难度相当大，需要花费不少时间去看对应的代码并理解其作用，但做完一整套的流程下来，能够掌握xv6的页表创建，调用，释放的流程，加深了理解，总体来说收获还是非常丰富的。</p>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab2 syscall</title>
      <link href="/mit-6-s081-lab2-syscall/"/>
      <url>/mit-6-s081-lab2-syscall/</url>
      
        <content type="html"><![CDATA[<p>咕咕了一周多，今天总算把Lab2做完了。</p><p>Lab2主要加深对系统调用的理解，做完确实学到了很多东西。</p><p>这个Lab有两个任务：添加一个系统调用<strong>trace</strong>和系统调用<strong>sysinfo</strong>，实现的重点也和Lab1的写代码变成了理解内核代码。资料方面需要读完xv6book的第二章和第四章的第三节与第四节，并且要熟悉对应的源码：</p><ul><li>系统调用的用户空间代码：<code>user/user.h</code>和<code>user/usys.pl</code></li><li>内核空间代码：<code>kernel/syscall.h</code>， <code>kernel/syscall.c</code></li><li>进程相关的代码：<code>kernel/proc.h</code>和<code>kernel/proc.c</code></li></ul><p>实验的地址在<a href="https://pdos.csail.mit.edu/6.828/2020/labs/syscall.html">这里</a></p><h3 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System call tracing"></a>System call tracing</h3><p>这个任务需要添加一个系统调用<strong>trace</strong>来追踪一个特定的系统调用的调用过程。在xv6中，每一个系统调用都有一个对应的编号，比如<strong>fork</strong>对应的编号<strong>SYS_fork</strong>值为1，而trace通过掩码的形式来追踪特定的系统调用，例如追踪fork，则调用trace(1 &lt;&lt; SYS_fork)，如果追踪到了就要输出进程id、系统调用的名称和返回值，并且trace还应该对子进程进行追踪。</p><p>这张图比较清晰的描述了系统调用的流程：<img src="syscall.png" alt="syscall"></p><p>根据任务提示，我们首先应该像lab1一样在Makefile中添加<code>$U/_trace</code>到 UPROGS。</p><p>然后分别在对应的文件中添加<strong>trace</strong>的相关声明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//user/user.h</span><span class="token keyword">int</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//user/usys.pl</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//kernel/syscall.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_trace</span> <span class="token expression"><span class="token number">22</span></span></span><span class="token comment">//kernel/syscall.c:107</span><span class="token keyword">extern</span> uint64 <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从教程或者生成的usys.S中，可以看到<code>li a7, SYS_trace</code>，说明系统调用号被存在了寄存器a7中，所以在<code>kernel/syscall.c</code>中，syscall函数通过<code>p-&gt;trapframe-&gt;a7</code>来获取系统调用的类型，然后通过函数指针的方式调用对应的系统调用函数。</p><p>接下来需要实现sys_trace这个函数，首先需要在<code>kernel/proc.h</code>中给proc这个结构体添加一个掩码mask，然后需要从寄存器里面取出它，需要使用到<code>argint</code>这个函数，具体实现如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//kernel/sysproc.c</span>uint64 <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mask<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> mask <span class="token operator">=</span> mask<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了能够追踪子进程，我们需要修改fork函数，将mask直接传递下去就行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//kernel/proc.c</span><span class="token comment">//add in fork()</span>np<span class="token operator">-&gt;</span>mask <span class="token operator">=</span> p<span class="token operator">-&gt;</span>mask<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来需要打印信息，修改syscall函数，记得函数的返回值是在a0寄存器中：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a7<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0 <span class="token operator">=</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//只增加下面这一行就行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span> p<span class="token operator">-&gt;</span>mask<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: syscall %s -&gt; %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> syscalls_name<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s: unknown sys call %d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了输出系统调用的名称，还应该新增一个数组来保存对应的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> syscalls_name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    <span class="token string">"fork"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    <span class="token string">"exit"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    <span class="token string">"wait"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    <span class="token string">"pipe"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    <span class="token string">"read"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    <span class="token string">"kill"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    <span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   <span class="token string">"fstat"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   <span class="token string">"chdir"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     <span class="token string">"dup"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  <span class="token string">"getpid"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    <span class="token string">"sbrk"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   <span class="token string">"sleep"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  <span class="token string">"uptime"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    <span class="token string">"open"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   <span class="token string">"write"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   <span class="token string">"mknod"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  <span class="token string">"unlink"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    <span class="token string">"link"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   <span class="token string">"mkdir"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   <span class="token string">"close"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_trace<span class="token punctuation">]</span>   <span class="token string">"trace"</span><span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sysinfo<span class="token punctuation">]</span> <span class="token string">"sysinfo"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样第一个任务就做完了。</p><h3 id="Sysinfo"><a href="#Sysinfo" class="headerlink" title="Sysinfo"></a>Sysinfo</h3><p>和任务一相似，首先添加声明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//user/user.h</span><span class="token keyword">int</span> <span class="token function">sysinfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//user/usys.pl</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"sysinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//kernel/syscall.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_sysinfo</span> <span class="token expression"><span class="token number">23</span></span></span><span class="token comment">//kernel/syscall.c:108</span><span class="token keyword">extern</span> uint64 <span class="token function">sys_sysinfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看sysinfo这个结构体，发现只有两个参数，一个是保存空闲内存信息，一个是保存正在运行的进程数目。根据提示，我们需要自己实现两个函数来获取这两个参数的值。</p><h4 id="获取可用内存"><a href="#获取可用内存" class="headerlink" title="获取可用内存"></a>获取可用内存</h4><p>阅读<code>kernel\kalloc.c</code>，可以发现可分配物理内存其实是用一个链表实现的，每个节点的大小都是4096，申请内存时，将链表的头部节点分出去然后向后移一位。那么获取可用的内存就很简单了，直接输出链表内的非空节点数*4096即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//kernel/kalloc.c</span>uint64 <span class="token function">free_mem</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">run</span> <span class="token operator">*</span>r <span class="token operator">=</span> kmem<span class="token punctuation">.</span>freelist<span class="token punctuation">;</span>    uint64 num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> r<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> PGSIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取进程数目"><a href="#获取进程数目" class="headerlink" title="获取进程数目"></a>获取进程数目</h4><p>这个更简单了，根据提示，只要把state等于UNUSED的进程排除掉就行了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//kernel/proc.c</span><span class="token keyword">int</span> <span class="token function">nproc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> state <span class="token operator">!=</span> UNUSED<span class="token punctuation">)</span> num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成了上面两个函数后，就可以实现sys_sysinfo了。</p><p>首先把那两个函数的声明添加到<code>kernel\defs.h</code>，根据提示，需要使用copyout这个函数将sysinfo复制回用户空间，具体实现如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//kernel/sysproc.c</span>uint64 <span class="token function">sys_sysinfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64 addr<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argaddr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>freemem <span class="token operator">=</span> <span class="token function">free_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>nproc <span class="token operator">=</span> <span class="token function">nproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">copyout</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样整个lab就做完了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果说新人任务的shell是让你知道什么是系统调用和怎么用，那么这个lab则是告诉你系统调用的具体原理，包括内核空间与用户空间，ecall指令和trapframe，还有页表等等许多知识，确实受益匪浅。</p>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab1 util</title>
      <link href="/mit-6-s081-lab1-util/"/>
      <url>/mit-6-s081-lab1-util/</url>
      
        <content type="html"><![CDATA[<p>寒假打算一边打ASC一边学点操作系统，于是打算开始做6.s801了。<br>版本是2020，源代码和环境配置在官网上写的很清楚，就暂时不写了。</p><p>Lab1是简单的Warmup以及对管道，多进程的基本应用，难度不算太大，顺便回忆一下当时写的shell和复习一下这方面的知识。教材方面需要看一看1.1～1.3</p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>这个实验比较简单，就是让你实现sleep，直接用提供的系统调用就可以。注意要输出报错信息。<br>代码应该保存在<strong>user/sleep.c</strong>中，并且在Makefile的UPROGS中添加**$U/*_*sleep/**，后续实验同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Usage: sleep time...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h3><p>该实验需要你完成以下功能：父进程向子进程发送ping，子进程收到ping后输出<strong>“pid received ping”</strong>，然后向父进程发送pong，父进程收到后做同样的操作。</p><p>考察对管道的简单应用，具体来说就是创建父-&gt;子，子-&gt;父两条管道，然后分别在对应的管道进行读写就可以了，及时close掉不用的fd可以避免被占用完。</p><p>没有试过只用一条管道，先咕咕。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//p-&gt;c</span>    <span class="token keyword">int</span> fd2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//c-&gt;p</span>        <span class="token function">pipe</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received %s\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"pong"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received %s\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h3><p>这个实验蛮有意思的，用多进程实现小范围的埃氏筛法。</p><p>给的参考资料写的很明白了，每个进程会从管道读一些数，将第一个作为基本质数输出，然后将读入的数中不能整除基本质数的数写入子进程中，直到没有数写入。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> send<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>base<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">%</span>base <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                send<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n_fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>n_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>n_fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>n_fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>send<span class="token punctuation">,</span> cnt<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>n_fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token function">prime</span><span class="token punctuation">(</span>n_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">36</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token number">34</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">prime</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>该实验要求你实现find命令。</p><p>可以参考给出的<strong>user/ls.c</strong>，照着改一改，不难。</p><p>注意递归的时候要处理一下 <strong>.</strong> 和 <strong>..</strong> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fmtname</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>DIRSIZ<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token comment">// Find first character after last slash.</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>path<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">&gt;=</span> path <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span>  p<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// Return blank-padded name.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> DIRSIZ<span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token function">memmove</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">dirent</span> de<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">stat</span> st<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"find: cannot open %s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"find: cannot stat %s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> T_FILE<span class="token operator">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">fmtname</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_DIR<span class="token operator">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> DIRSIZ <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"find: path too long\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> buf<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>inum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> DIRSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token punctuation">[</span>DIRSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">find</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">find</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>该实验要求实现xargs。</p><p>考察管道和fork &amp; exec的调用，写过shell的对这个应该不陌生。循环地从标准输出读取数据，并以’\n’为为分割， 将每一行输出作为xargs 后命令的参数并执行，注意的一点是，利用 <code>fork()</code> 让命令在子进程中执行后，函数并没有结束，还需要继续读取，因此一些变量需要继续设置新的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/param.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">[</span>MAXARG<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cmd<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                buf<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                cmd<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                buf<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                cmd<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>                cmd<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> buf<span class="token punctuation">;</span>                cnt <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token function">exec</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                buf<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Labs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo简易搭建教程</title>
      <link href="/hexo-jian-yi-da-jian-jiao-cheng/"/>
      <url>/hexo-jian-yi-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><pre class="line-numbers language-none"><code class="language-none">sudo pacman -S nodejs npmsudo npm install -g hexo-cliecho 'PATH="$PATH:./node_modules/.bin"' &gt;&gt; ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-新建github-pages仓库"><a href="#2-新建github-pages仓库" class="headerlink" title="2 新建github pages仓库"></a>2 新建github pages仓库</h3><ul><li>创建名为username.github.io的repo。</li><li>Settings -&gt; Pages</li><li>分支选master，如果还有别的用处就建个新分支然后save，问题不大。</li><li>theme随便选一个。</li><li>域名到时候再说。</li></ul><h3 id="3-本地hexo搭建"><a href="#3-本地hexo搭建" class="headerlink" title="3 本地hexo搭建"></a>3 本地hexo搭建</h3><pre class="line-numbers language-none"><code class="language-none">hexo init blogcd blognpm installnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面的blog可以换成别的名字，不需要mkdir</li></ul><h3 id="4-hexo配置，发布"><a href="#4-hexo配置，发布" class="headerlink" title="4 hexo配置，发布"></a>4 hexo配置，发布</h3><ul><li>修改blog目录下的_config.yml</li><li>拉到最底下，找到deploy，如下修改</li></ul><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: &lt;repository url&gt; //你的仓库名  branch: [branch] //你选的分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行命令<code>hexo n "&lt;title&gt;"</code>，会在source目录下生成_post目录，里面有一个md文件。</li><li>里面随便写点内容，不写也行。</li><li>执行以下命令</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>浏览器输入yourname.github.io即可访问。</li><li>发布前可以在hexo g后执行hexo s然后访问localhost:4000预览。</li></ul><h3 id="5-绑域名（非必要）"><a href="#5-绑域名（非必要）" class="headerlink" title="5 绑域名（非必要）"></a>5 绑域名（非必要）</h3><ul><li>买一个域名，添加对你的github.io的CNAME解析和A解析。</li><li>repo的Setting -&gt; Pages界面，domain那里填你的域名然后save</li><li>本地的source文件夹内新建一个CNAME文件（无后缀），内容填你的域名。</li></ul><h3 id="6-主题"><a href="#6-主题" class="headerlink" title="6 主题"></a>6 主题</h3><ul><li>自己找对应文档看吧。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
